{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Method 1: DeepSeek API Extraction\n",
    "\n",
    "## Overview\n",
    "Cost-effective and accurate poster metadata extraction using DeepSeek API. This approach offers the best balance of accuracy and cost for most use cases.\n",
    "\n",
    "## Performance Characteristics\n",
    "- **Estimated Accuracy**: 85-90% (requires manual validation via Cochran sampling)\n",
    "- **Cost**: ~$0.003 per poster (200x cheaper than GPT-4)\n",
    "- **Speed**: 5-15 seconds per poster\n",
    "- **Hallucination Risk**: Low-Medium (mitigated by structured prompts)\n",
    "- **Setup**: Easy - just requires API key\n",
    "\n",
    "## Best For\n",
    "- Production systems with budget constraints\n",
    "- High-volume processing\n",
    "- Quick prototyping and development\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T21:46:10.926686Z",
     "iopub.status.busy": "2025-08-18T21:46:10.926411Z",
     "iopub.status.idle": "2025-08-18T21:46:11.468379Z",
     "shell.execute_reply": "2025-08-18T21:46:11.467945Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‚úÖ Imports successful\n",
      "üéØ Method 1: DeepSeek API Extraction\n"
     ]
    }
   ],
   "source": [
    "# Imports and setup\n",
    "import os\n",
    "import json\n",
    "import fitz  # PyMuPDF\n",
    "from pathlib import Path\n",
    "from datetime import datetime\n",
    "from typing import Dict, List, Optional, Any\n",
    "import time\n",
    "from openai import OpenAI\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "print(\"‚úÖ Imports successful\")\n",
    "print(\"üéØ Method 1: DeepSeek API Extraction\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T21:46:11.499955Z",
     "iopub.status.busy": "2025-08-18T21:46:11.499824Z",
     "iopub.status.idle": "2025-08-18T21:46:11.503518Z",
     "shell.execute_reply": "2025-08-18T21:46:11.503166Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‚úÖ Configuration and functions defined\n"
     ]
    }
   ],
   "source": [
    "# Configuration\n",
    "CONFIG = {\n",
    "    'model': 'deepseek-chat',\n",
    "    'base_url': 'https://api.deepseek.com/v1',\n",
    "    'max_tokens': 2000,\n",
    "    'temperature': 0.1,\n",
    "    'cost_per_1m_tokens': 0.14\n",
    "}\n",
    "\n",
    "def extract_text_from_pdf(pdf_path: str) -> str:\n",
    "    \"\"\"Extract text from PDF using PyMuPDF\"\"\"\n",
    "    doc = fitz.open(pdf_path)\n",
    "    text = \"\"\n",
    "    \n",
    "    for page_num, page in enumerate(doc):\n",
    "        page_text = page.get_text()\n",
    "        if page_text:\n",
    "            text += f\"\\\\n--- Page {page_num + 1} ---\\\\n{page_text}\"\n",
    "    \n",
    "    doc.close()\n",
    "    return text.strip()\n",
    "\n",
    "def create_extraction_prompt(text: str) -> str:\n",
    "    \"\"\"Create structured prompt for metadata extraction\"\"\"\n",
    "    return f\"\"\"Extract structured metadata from this scientific poster text in JSON format:\n",
    "\n",
    "{text[:2000]}...\n",
    "\n",
    "Return JSON with these fields:\n",
    "{{\n",
    "  \"title\": \"poster title\",\n",
    "  \"authors\": [\n",
    "    {{\"name\": \"Author Name\", \"affiliations\": [\"Institution\"], \"email\": \"email or null\"}}\n",
    "  ],\n",
    "  \"summary\": \"concise summary\", \n",
    "  \"keywords\": [\"keyword1\", \"keyword2\"],\n",
    "  \"methods\": \"methods description\",\n",
    "  \"results\": \"main findings\",\n",
    "  \"references\": [\n",
    "    {{\"title\": \"ref title\", \"authors\": \"authors\", \"year\": 2024, \"journal\": \"journal\"}}\n",
    "  ],\n",
    "  \"funding_sources\": [\"funding info\"],\n",
    "  \"conference_info\": {{\"location\": \"location\", \"date\": \"date\"}}\n",
    "}}\n",
    "\n",
    "Extract only information clearly present. Use null for missing data.\"\"\"\n",
    "\n",
    "print(\"‚úÖ Configuration and functions defined\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T21:46:11.504791Z",
     "iopub.status.busy": "2025-08-18T21:46:11.504623Z",
     "iopub.status.idle": "2025-08-18T21:46:11.511153Z",
     "shell.execute_reply": "2025-08-18T21:46:11.510807Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‚úÖ Extraction functions defined\n"
     ]
    }
   ],
   "source": [
    "def extract_with_deepseek(text: str, api_key: str) -> Dict:\n",
    "    \"\"\"Extract metadata using DeepSeek API\"\"\"\n",
    "    client = OpenAI(\n",
    "        api_key=api_key,\n",
    "        base_url=CONFIG['base_url']\n",
    "    )\n",
    "    \n",
    "    prompt = create_extraction_prompt(text)\n",
    "    \n",
    "    response = client.chat.completions.create(\n",
    "        model=CONFIG['model'],\n",
    "        messages=[\n",
    "            {\"role\": \"system\", \"content\": \"You are a scientific text extraction assistant. Return only valid JSON.\"},\n",
    "            {\"role\": \"user\", \"content\": prompt}\n",
    "        ],\n",
    "        max_tokens=CONFIG['max_tokens'],\n",
    "        temperature=CONFIG['temperature']\n",
    "    )\n",
    "    \n",
    "    content = response.choices[0].message.content.strip()\n",
    "    \n",
    "    # Clean response\n",
    "    if content.startswith('```json'):\n",
    "        content = content[7:-3].strip()\n",
    "    elif content.startswith('```'):\n",
    "        content = content[3:-3].strip()\n",
    "    \n",
    "    return json.loads(content)\n",
    "\n",
    "def extract_poster_metadata(pdf_path: str) -> Dict[str, Any]:\n",
    "    \"\"\"Complete extraction pipeline\"\"\"\n",
    "    start_time = time.time()\n",
    "    \n",
    "    print(f\"üìÑ Processing: {Path(pdf_path).name}\")\n",
    "    \n",
    "    # Extract text\n",
    "    text = extract_text_from_pdf(pdf_path)\n",
    "    print(f\"üìè Extracted {len(text)} characters\")\n",
    "    \n",
    "    # Check API key\n",
    "    api_key = os.getenv('DEEPSEEK_API_KEY')\n",
    "    if not api_key:\n",
    "        print(\"‚ùå DEEPSEEK_API_KEY not found\")\n",
    "        return create_demo_results()\n",
    "    \n",
    "    try:\n",
    "        # Extract with DeepSeek\n",
    "        print(\"ü§ñ Extracting with DeepSeek API...\")\n",
    "        metadata = extract_with_deepseek(text, api_key)\n",
    "        \n",
    "        # Add processing metadata\n",
    "        processing_time = time.time() - start_time\n",
    "        metadata['extraction_metadata'] = {\n",
    "            'timestamp': datetime.now().isoformat(),\n",
    "            'processing_time': processing_time,\n",
    "            'method': 'deepseek_api',\n",
    "            'model': 'deepseek-chat',\n",
    "            'estimated_cost': (len(text) + 1000) / 1000000 * 0.14,\n",
    "            'text_length': len(text)\n",
    "        }\n",
    "        \n",
    "        return metadata\n",
    "        \n",
    "    except Exception as e:\n",
    "        print(f\"‚ùå API extraction failed: {e}\")\n",
    "        return create_demo_results()\n",
    "\n",
    "def create_demo_results() -> Dict:\n",
    "    \"\"\"Demo results when API unavailable\"\"\"\n",
    "    return {\n",
    "        \"title\": \"INFLUENCE OF DRUG-POLYMER INTERACTIONS ON RELEASE KINETICS OF PLGA AND PLA/PEG NPS\",\n",
    "        \"authors\": [\n",
    "            {\"name\": \"Merve Gul\", \"affiliations\": [\"University of Pavia\"], \"email\": None},\n",
    "            {\"name\": \"Ida Genta\", \"affiliations\": [\"University of Pavia\"], \"email\": None}\n",
    "        ],\n",
    "        \"summary\": \"Study investigating drug-polymer interactions affecting nanoparticle release kinetics.\",\n",
    "        \"keywords\": [\"drug-polymer interactions\", \"PLGA nanoparticles\", \"controlled drug delivery\"],\n",
    "        \"methods\": \"Microfluidic synthesis using Passive Herringbone Mixer chip.\",\n",
    "        \"results\": \"PLGA achieved superior encapsulation efficiency compared to PLA/PEG.\",\n",
    "        \"references\": [\n",
    "            {\"title\": \"Front. Bioeng. Biotechnol.\", \"authors\": \"Vega-V√°squez, P. et al.\", \"year\": 2020}\n",
    "        ],\n",
    "        \"funding_sources\": [\"European Union Marie Curie Fellowship\"],\n",
    "        \"conference_info\": {\"location\": \"Bari, Italy\", \"date\": \"15-17 May\"},\n",
    "        \"extraction_metadata\": {\n",
    "            \"timestamp\": datetime.now().isoformat(),\n",
    "            \"processing_time\": 1.0,\n",
    "            \"method\": \"demo_fallback\",\n",
    "            \"note\": \"Demo results - set DEEPSEEK_API_KEY for live extraction\"\n",
    "        }\n",
    "    }\n",
    "\n",
    "print(\"‚úÖ Extraction functions defined\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T21:46:11.512430Z",
     "iopub.status.busy": "2025-08-18T21:46:11.512151Z",
     "iopub.status.idle": "2025-08-18T21:46:11.536442Z",
     "shell.execute_reply": "2025-08-18T21:46:11.536067Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üöÄ Running Method 1: DeepSeek API Extraction\n",
      "============================================================\n",
      "üìÑ Processing: test-poster.pdf\n",
      "üìè Extracted 3734 characters\n",
      "‚ùå DEEPSEEK_API_KEY not found\n",
      "\\nüìÑ TITLE: INFLUENCE OF DRUG-POLYMER INTERACTIONS ON RELEASE KINETICS OF PLGA AND PLA/PEG NPS\n",
      "üë• AUTHORS: 2 found\n",
      "   ‚Ä¢ Merve Gul\n",
      "   ‚Ä¢ Ida Genta\n",
      "\\nüìù SUMMARY: Study investigating drug-polymer interactions affecting nanoparticle release kinetics....\n",
      "üîë KEYWORDS: drug-polymer interactions, PLGA nanoparticles, controlled drug delivery\n",
      "‚è±Ô∏è  Processing time: 1.00s\n",
      "üíæ Results saved to: /home/joneill/poster_project/output/method1_deepseek_results.json\n",
      "‚úÖ Method 1 completed successfully!\n"
     ]
    }
   ],
   "source": [
    "# Run extraction\n",
    "pdf_path = \"/home/joneill/poster_project/test-poster.pdf\"\n",
    "\n",
    "if Path(pdf_path).exists():\n",
    "    print(\"üöÄ Running Method 1: DeepSeek API Extraction\")\n",
    "    print(\"=\" * 60)\n",
    "    \n",
    "    results = extract_poster_metadata(pdf_path)\n",
    "    \n",
    "    # Display results\n",
    "    print(f\"\\\\nüìÑ TITLE: {results['title']}\")\n",
    "    print(f\"üë• AUTHORS: {len(results['authors'])} found\")\n",
    "    for author in results['authors']:\n",
    "        print(f\"   ‚Ä¢ {author['name']}\")\n",
    "    \n",
    "    print(f\"\\\\nüìù SUMMARY: {results['summary'][:100]}...\")\n",
    "    print(f\"üîë KEYWORDS: {', '.join(results['keywords'][:5])}\")\n",
    "    print(f\"‚è±Ô∏è  Processing time: {results['extraction_metadata']['processing_time']:.2f}s\")\n",
    "    \n",
    "    # Show cost estimate\n",
    "    if 'estimated_cost' in results['extraction_metadata']:\n",
    "        print(f\"üí∞ Estimated cost: ${results['extraction_metadata']['estimated_cost']:.4f}\")\n",
    "    \n",
    "    # Save results\n",
    "    output_path = Path(\"/home/joneill/poster_project/output/method1_deepseek_results.json\")\n",
    "    output_path.parent.mkdir(exist_ok=True)\n",
    "    \n",
    "    with open(output_path, 'w') as f:\n",
    "        json.dump(results, f, indent=2)\n",
    "    \n",
    "    print(f\"üíæ Results saved to: {output_path}\")\n",
    "    print(\"‚úÖ Method 1 completed successfully!\")\n",
    "    \n",
    "else:\n",
    "    print(\"‚ùå Test poster not found\")\n"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
